#pragma once
#include <array>

namespace ggb
{
	struct CPUState;
	class BUS;
	// TODO: Is this really cleaner than having it in every method???
#define CPUInstructionParameters CPUState* cpu, BUS* bus
	// It is possible to use std::function here, however debugging is easier with plain C function pointers (and no performance overhead)
	using InstructionFunction = void (*)(CPUInstructionParameters);
	
	void invalidInstruction(CPUInstructionParameters);
	void noop(CPUInstructionParameters);
	void loadBCValue(CPUInstructionParameters);
	void writeAToAddressBC(CPUInstructionParameters);


	void incrementA(CPUInstructionParameters);
	void jumpToValue(CPUInstructionParameters);
	void xorASelf(CPUInstructionParameters);

	struct OpcodeEntry 
	{
		InstructionFunction func;
		uint8_t cycleCount;
		void operator()(CPUInstructionParameters)
		{
			func(cpu, bus);
		};
	};

	static OpcodeEntry INVALID = { invalidInstruction, 0 };

	static std::array<OpcodeEntry, 512> opcodes
	{
		OpcodeEntry{noop, 4},
		OpcodeEntry{loadBCValue, 12},
		OpcodeEntry{writeAToAddressBC, 8},
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		OpcodeEntry{incrementA, 4},
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		OpcodeEntry{xorASelf, 4},
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		//OpcodeEntry{jumpToValue, 16}, // TODO check if this is correct
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
		INVALID,
	};
}